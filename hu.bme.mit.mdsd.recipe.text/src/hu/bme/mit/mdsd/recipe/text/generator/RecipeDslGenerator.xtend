package hu.bme.mit.mdsd.recipe.text.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import hu.bme.mit.mdsd.recipe.Recipe
import hu.bme.mit.mdsd.recipe.Container
import hu.bme.mit.mdsd.recipe.Unit
import java.util.stream.Collectors
import hu.bme.mit.mdsd.recipe.SuccessionRelation
import java.util.Collections
import hu.bme.mit.mdsd.recipe.StandardAction

class RecipeDslGenerator extends AbstractGenerator {

	val projname = 'PRDL'

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val recipe = resource.contents.get(0) as Recipe
		fsa.generateFile('recipe.html', generate(recipe))
	}

	private def generate(Recipe recipe) {
		'''
			<!doctype html>
			<html lang=en>
			
			<meta charset=utf-8>
			<meta name=viewport content='width=device-width, initial-scale=1'>
			<title>«recipe.name»</title>
			<meta name=generator content='«projname»'>
			
			<main>
			<h1>«recipe.name»</h1>
			
			<section id=ingredients>
				<h2>Ingredients</h2>
			
				<ul>
				«FOR i : recipe.ingredients»
					<li>
						«i.name»;
						«i.amount.amount» «unit(i.amount.unit)»
					</li>
				«ENDFOR»
				</ul>
			
				«IF !recipe.tools.empty»
				You will also need...
				<ul>
					«FOR t: recipe.tools»
						<li>
							a(n) «t.name»
							«IF t instanceof Container
					 && (t as Container).capacity !== null»
								that can hold
								«(t as Container).capacity.amount»
								«unit((t as Container).capacity.unit)»
								</li>
						«ENDIF»
					«ENDFOR»
				</ul>
				«ENDIF»
			</section>
			
			«IF !recipe.actions.empty»
				<section id=instructions>
					<h2>Instructions</h2>
			
				<ol>
					«FOR a: orderedActions(recipe)»
						<li>«a.name»«IF a instanceof StandardAction»«IF a.tool !== null»(«a.tool.name»)«ENDIF»«ENDIF»
					«ENDFOR»
				</ol>
				</section>
			«ENDIF»
			</main>
			
			<footer>
				generated by «projname»
			</footer>
		'''
	}

	private def unit(Unit unit) {
		switch (unit) {
			case Unit.DECAGRAM: return 'dkg'
			case Unit.DECILITER: return 'dl'
			case Unit.PIECE: return null
			case Unit.PINCH: return 'pinches'
			case Unit.TABLESPOON: return 'tbsp'
			case Unit.TEASPOON: return 'tsp'
			case Unit.TO_TASTE: return 'to taste'
		}
	}

	private def orderedActions(Recipe recipe) {
		val actions = recipe.actions
		for (rel : recipe.relations.filter(typeof(SuccessionRelation))) {
			val prevIdx = actions.indexOf(rel.prev)
			val nextIdx = actions.indexOf(rel.next)
			if (prevIdx > nextIdx)
				Collections.swap(actions, prevIdx, nextIdx)
		}
		return actions
	}

}
